name: Python tests

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          pipx install ruff
          ruff check
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
          poetry run maturin develop
      - name: Run tests
        run: |
          poetry run pytest --exitfirst --disable-warnings --log-cli-level=DEBUG --cov-report xml:cov.xml --cov=radixtarget .
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cov.xml
          verbose: true
  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry maturin
      - name: Get current version from Poetry
        id: get_version
        run: |
          VERSION=$(poetry version --short)
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV
      - name: Fetch latest tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" | tee -a $GITHUB_ENV
      - name: Detect version change
        run: |
          # Retrieve and strip "v" prefix if present
          PREVIOUS_VERSION="${{ env.LATEST_TAG }}"
          CURRENT_VERSION="${{ env.VERSION }}"

          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION"

          # Extract major.minor for comparison
          CURRENT_MAJOR_MINOR=$(echo "${CURRENT_VERSION#v}" | cut -d '.' -f 1-2)
          PREVIOUS_MAJOR_MINOR=$(echo "${PREVIOUS_VERSION#v}" | cut -d '.' -f 1-2)

          # Compare versions
          if [ "$CURRENT_MAJOR_MINOR" == "$PREVIOUS_MAJOR_MINOR" ]; then
            echo "VERSION_CHANGE=false" | tee -a $GITHUB_ENV
          else
            echo "VERSION_CHANGE=true" | tee -a $GITHUB_ENV
          fi
        shell: bash
      - name: Build PyPi package
        if: github.ref == 'refs/heads/master'
        run: maturin build --release --out dist
      - name: Publish PyPi package
        if: github.ref == 'refs/heads/master'
        run: maturin publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}
      - name: Tag the release
        if: github.ref == 'refs/heads/master' && env.VERSION_CHANGE == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "refs/tags/${{ env.VERSION }}"
